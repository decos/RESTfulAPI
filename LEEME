-- CREAR UN PROYECTO EN LARAVEL 5.0
	 composer create-project laravel/laravel=5.0 RESTfulAPI

	FEDORA
	- Realizar lo siguiente por línea de comandos si tienes problemas haciendo "composer install":
		1. yum install mcrypt
		2. yum install php5-mcrypt
		3. Añadir a php.ini: extension=mcrypt.so (no es seguro)

	LINUX
	- Realizar lo siguiente por línea comandos:
		1. chmod -R 777 storage
		2. chmod -R 777 bootstrap

	ARTISAN
	- Entre las herramientas que Laravel nos proporciona para el desarrollo de aplicaciones se encuentra Artisan, la interfaz de línea de comandos (CLI por sus siglas en inglés de Command-line interface), la cual es un medio para la interacción con la aplicación. 

-- ESTRUCTURA
	- Basado en la arquitectura MVC
	- Modelos: Dentro del directorio "app"
	- Vistas: Dentro del directorio "resources/views"
	- Controladores: Dentro del directorio "app/Http/Controllers"
	- Rutas: Dentro del directorio "app/Http"
	
	- Gestor de plantillas que usa Laravel: BLADE

-- CREANDO NUESTROS MODELOS (API de vehículos)
	- En la version 4 se extendia de "Eloquent" , en la version 5 extiende de "Model".
	- Atributo "fillable", atributos que pueden ser asignados de manera masiva.
	- Se crearan dos modelos: Vehiculo y Fabricante	con sus respectivas relaciones.

-- CONSTRUYENDO BASE DE DATOS CON LARAVEL
	- Migracion: "database/migrations"

	- Comandos por consola:
		php artisan list		
		php artisan make:migration --help

	1. Configuracion de la Base de Datos
		- Configurar los parametros DB_HOST=localhost, DB_DATABASE=api, DB_USERNAME=root, DB_PASSWORD= en el siguiente archivo:
		/opt/lampp/htdocs/RESTfulAPI/.env

	2. Crear la base de datos "api" desde "phpmyadmin"
	3. Preparar los arhivos de migracion .php para la creacion de tablas usando "artisan"
		php artisan make:migration fabricantes_migration --create=fabricantes
		php artisan make:migration vehiculos_migration --create=vehiculos
		
	4. Agregar a los archivos de migracion las columnas que faltan
		/opt/lampp/htdocs/RESTfulAPI/database/migrations/2017_07_17_223544_vehiculos_migration.php
		/opt/lampp/htdocs/RESTfulAPI/database/migrations/2017_07_17_223515_fabricantes_migration.php

	5. Ejecutar en consola lo siguiente para crear la tabla "migrations" en la base de datos,
		la cual llevara un control de los cambios que se daran en la base de datos
		php artisan migrate:install

	6. Ejecutar en consola:
		php artisan migrate

	7. Para deshacer los cambios o si tuviesemos un error, escribiriamos por consola:
		php artisan migrate:rollback

-- POBLANDO LA BASE DE DATOS USANDO LARAVEL 
	
	SEEDS
	- Son una serie de instrucciones que se ejecutan y estan en el siguiente directorio
		/opt/lampp/htdocs/RESTfulAPI/database/seeds
	
	- Buscar librerias en Composer relacionadas con la palabra "faker"	  
		composer search faker
	
	- Descargar el proyecto "fzaninotto/faker" usando composer
		composer require fzaninotto/faker --dev

	- Creamos el fichero "FabricanteSeeder" 
		/opt/lampp/htdocs/RESTfulAPI/database/seeds/FabricanteSeeder.php

	- Creamos el fichero "VehiculoSeeder" 
		/opt/lampp/htdocs/RESTfulAPI/database/seeds/VehiculoSeeder.php

	- Para ejecutar los Seeders
		php artisan db:seed

	- ERRORES (CLÁSICO):
		La Clase VehiculoSeeder no existe, composer no ha hecho la carga de la clase Seeder que hemos creado.
		SOL: composer dump-autoload

-- CREAR RUTAS REST 
	- Lista de rutas que actualmente estan configuradas en nuestro proyecto
		php artisan route:list

	1. Agregar las "rutas" al siguiente archivo:
		/opt/lampp/htdocs/RESTfulAPI/app/Http/routes.php

-- CREAR CONTROLADORES PARA LA API
	Crear los siguientes controladores:
		1. /opt/lampp/htdocs/RESTfulAPI/app/Http/Controllers/FabricanteController.php
		2. /opt/lampp/htdocs/RESTfulAPI/app/Http/Controllers/VehiculoController.php


-- MEJORANDO RUTAS Y CONTROLADORES
	1. Agregar la siguiente ruta: Route::resource('vehiculos', 'VehiculoController');
	2. Cambiar el nombre del fichero y el nombre de la clase:
		VehiculoController > FabricanteVehiculoController
	3. Ejecutar la siguiente linea de comando para la creacion del controlador "VehiculoController"
		php artisan make:controller VehiculoController
	
	- ERRORES (CLÁSICO):
	 	php artisan route:list
		[ReflectionException]
		Class App\Http\Controllers\VehiculoController does not exist
	  SOLUCION:
	  	composer dump-autoload

  	4. Usar "only" o "except" segun corresponda en el fichero "routes.php"

-- MOSTRANDO VALORES DE UN RECURSO
	
	Mostrando todos los fabricantes
		http://localhost/RESTfulAPI/public/fabricantes

	1. Agregar la clase al controlador Fabricante
	2. Modificar la funcion index del controlador Fabricante
		return Fabricante::all();
	3. Esconder atributos 
		C:\xampp\htdocs\RESTfulAPI\app\Fabricante.php

	Mostrando un solo fabricante
		http://localhost/RESTfulAPI/public/fabricantes/6
		
--MOSTRANDO VALORES DE RECURSOS ANIDADOS
	
	Mostrando todos los vehiculos
		http://localhost/RESTfulAPI/public/vehiculos

	Mostarando un solo vehiculo
		http://localhost/RESTfulAPI/public/vehiculos/6

	Mostrando recursos anidados
		http://localhost/RESTfulAPI/public/fabricantes/1/vehiculos

		1. Modificacion la funcion "index" del controlador "FabricanteVehiculoController"

--EL PROBLEMA CON EL MIDDLEWARE PARA CSRF, Y SU FUNCIÓN

	CSRF (Token de Seguridad)
		Medida de seguridad que el usuario haga cambios sobre los formularios (agregar campos o eliminar campos)

	MIDDLEWARE (filtros)
		Sustituye a los filtros en Laravel 5

		- Carpeta Middleware:
			/app/Http/Middleware

		El siguiente fichero, se encarga de cargar los filtros:
			/app/Http/Kernel.php

			protected $middleware - Se cargaran siempre en cada una de las peticiones que se hacen a nuestro servicio web o API RESTful


			protected $routeMiddleware - Se cargaran de manera opcional, cuando se les llame.

		'App\Http\Middleware\VerifyCsrfToken'
			Realiza la verificacion del Token CSRF

			-Deshabilitarlo unicamente si nunca vamos a utilizar formularios

--AUTENTICACION BASICA Y MIDDLEWARES

	- Laravel ya nos provee un MIDDLEWARE correctamente definido

	- Modelo USER: viene por defecto con la instalación de Laravel
		C:\xampp\htdocs\RESTfulAPI\app\User.php


	1. Crear la migración
		php artisan make:migration user --create=users

	2. Agregar los campos (email, password) al fichero:
		C:\xampp\htdocs\RESTfulAPI\database\migrations\2017_07_23_044655_user.php

	3. Procesar la migración 
		Creamos la tabla 'users' en la base de datos.
		php artisan migrate

	4. Crear el Seeder 'UserSeeder'

	5. Ejecutar por consola lo siguiente:
		composer dump-autoload
		php artisan db:seed

	EJECUTAR TODO DESDE UN INICIO
		php artisan migrate:refresh --seed

	6. Agregar filtro a un controlador
		public function __construct()
		{
			$this->middleware('auth.basic');
		}

--ALMACENANDO DATOS USANDO INYECCION DE DEPENDENCIAS (store)

	1. Implementando la función "store" del controlador "Fabricante"
	2. Implementando la función "store" del controlador "FabricanteVehiculo"

--REPARANDO LA INSERCION DE RECURSOS ANIDADOS (store)

	1. Agregar a la función el parametro "id"
	2. Eliminar de la validación "fabricante_id"
	3. Modificar la siguiente linea de codigo:
		$fabricante = Fabricante::find($id);
 
--ACTUALIZANDO VALORES DE UN RECURSO (put & patch)
	-Implementación de la función "update" para el FABRICANTE
		- Diferencia entre PUT y PATCH:
		PUT: Cuando recibe una peticion realiza una sustitucion completa (debemos enviar todos los valores).
		PATCH: Cuando recibe una peticion realiza una sustitucion incompleta.
	
--ACTUALIZANDO VALORES DE UN RECURSO ANIDADO
	- Modificar el metodo "update" del controlador "FabricanteVehiculo"
	- La bandera tmb se añade al metodo "update" del controtador "Fabricante"
	- 304 - Not Modified (No hay necesidad de retornar nada)




	
	
