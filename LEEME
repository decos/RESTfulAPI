-- CREAR UN PROYECTO EN LARAVEL 5.0
	 composer create-project laravel/laravel=5.0 RESTfulAPI

	FEDORA
	- Realizar lo siguiente por línea de comandos si tienes problemas haciendo "composer install":
		1. yum install mcrypt
		2. yum install php5-mcrypt
		3. Añadir a php.ini: extension=mcrypt.so (no es seguro)

	LINUX
	- Realizar lo siguiente por línea comandos:
		1. chmod -R 777 storage
		2. chmod -R 777 bootstrap

	ARTISAN
	- Entre las herramientas que Laravel nos proporciona para el desarrollo de aplicaciones se encuentra Artisan, la interfaz de línea de comandos (CLI por sus siglas en inglés de Command-line interface), la cual es un medio para la interacción con la aplicación. 

-- ESTRUCTURA
	- Basado en la arquitectura MVC
	- Modelos: Dentro del directorio "app"
	- Vistas: Dentro del directorio "resources/views"
	- Controladores: Dentro del directorio "app/Http/Controllers"
	- Rutas: Dentro del directorio "app/Http"
	
	- Gestor de plantillas que usa Laravel: BLADE

-- CREANDO NUESTROS MODELOS (API de vehículos)
	- En la version 4 se extendia de "Eloquent" , en la version 5 extiende de "Model".
	- Atributo "fillable", atributos que pueden ser asignados de manera masiva.
	- Se crearan dos modelos: Vehiculo y Fabricante	con sus respectivas relaciones.

-- CONSTRUYENDO BASE DE DATOS CON LARAVEL
	- Migracion: "database/migrations"

	- Comandos por consola:
		php artisan list		
		php artisan make:migration --help

	1. Configuracion de la Base de Datos
		- Configurar los parametros DB_HOST=localhost, DB_DATABASE=api, DB_USERNAME=root, DB_PASSWORD= en el siguiente archivo:
		/opt/lampp/htdocs/RESTfulAPI/.env

	2. Crear la base de datos "api" desde "phpmyadmin"
	3. Preparar los arhivos de migracion .php para la creacion de tablas usando "artisan"
		php artisan make:migration fabricantes_migration --create=fabricantes
		php artisan make:migration vehiculos_migration --create=vehiculos
		
	4. Agregar a los archivos de migracion las columnas que faltan
		/opt/lampp/htdocs/RESTfulAPI/database/migrations/2017_07_17_223544_vehiculos_migration.php
		/opt/lampp/htdocs/RESTfulAPI/database/migrations/2017_07_17_223515_fabricantes_migration.php

	5. Ejecutar en consola lo siguiente para crear la tabla "migrations" en la base de datos,
		la cual llevara un control de los cambios que se daran en la base de datos
		php artisan migrate:install

	6. Ejecutar en consola:
		php artisan migrate

	7. Para deshacer los cambios o si tuviesemos un error, escribiriamos por consola:
		php artisan migrate:rollback

-- POBLANDO LA BASE DE DATOS USANDO LARAVEL 
	
	SEEDS
	- Son una serie de instrucciones que se ejecutan y estan en el siguiente directorio
		/opt/lampp/htdocs/RESTfulAPI/database/seeds
	
	- Buscar librerias en Composer relacionadas con la palabra "faker"	  
		composer search faker
	
	- Descargar el proyecto "fzaninotto/faker" usando composer
		composer require fzaninotto/faker --dev

	- Creamos el fichero "FabricanteSeeder" 
		/opt/lampp/htdocs/RESTfulAPI/database/seeds/FabricanteSeeder.php

	- Creamos el fichero "VehiculoSeeder" 
		/opt/lampp/htdocs/RESTfulAPI/database/seeds/VehiculoSeeder.php

	- Para ejecutar los Seeders
		php artisan db:seed

	- ERRORES (CLÁSICO):
		La Clase VehiculoSeeder no existe, composer no ha hecho la carga de la clase Seeder que hemos creado.
		SOL: composer dump-autoload

-- CREAR RUTAS REST 
	- Lista de rutas que actualmente estan configuradas en nuestro proyecto
		php artisan route:list

	1. Agregar las "rutas" al siguiente archivo:
		/opt/lampp/htdocs/RESTfulAPI/app/Http/routes.php

-- CREAR CONTROLADORES PARA LA API
	Crear los siguientes controladores:
		1. /opt/lampp/htdocs/RESTfulAPI/app/Http/Controllers/FabricanteController.php
		2. /opt/lampp/htdocs/RESTfulAPI/app/Http/Controllers/VehiculoController.php


-- MEJORANDO RUTAS Y CONTROLADORES
	1. Agregar la siguiente ruta: Route::resource('vehiculos', 'VehiculoController');
	2. Cambiar el nombre del fichero y el nombre de la clase:
		VehiculoController > FabricanteVehiculoController
	3. Ejecutar la siguiente linea de comando para la creacion del controlador "VehiculoController"
		php artisan make:controller VehiculoController
	
	- ERRORES (CLÁSICO):
	 	php artisan route:list
		[ReflectionException]
		Class App\Http\Controllers\VehiculoController does not exist
	  SOLUCION:
	  	composer dump-autoload

  	4. Usar "only" o "except" segun corresponda en el fichero "routes.php"

-- MOSTRANDO VALORES DE UN RECURSO
	
	Mostrando todos los fabricantes
		http://localhost/RESTfulAPI/public/fabricantes

	1. Agregar la clase al controlador Fabricante
	2. Modificar la funcion index del controlador Fabricante
		return Fabricante::all();
	3. Esconder atributos 
		C:\xampp\htdocs\RESTfulAPI\app\Fabricante.php

	Mostrando un solo fabricante
		http://localhost/RESTfulAPI/public/fabricantes/6
		
--MOSTRANDO VALORES DE RECURSOS ANIDADOS
	
	Mostrando todos los vehiculos
		http://localhost/RESTfulAPI/public/vehiculos

	Mostarando un solo vehiculo
		http://localhost/RESTfulAPI/public/vehiculos/6

	Mostrando recursos anidados
		http://localhost/RESTfulAPI/public/fabricantes/1/vehiculos

		1. Modificacion la funcion "index" del controlador "FabricanteVehiculoController"

--EL PROBLEMA CON EL MIDDLEWARE PARA CSRF, Y SU FUNCIÓN

	CSRF (Token de Seguridad)
		Medida de seguridad que el usuario haga cambios sobre los formularios (agregar campos o eliminar campos)

	MIDDLEWARE (filtros)
		Sustituye a los filtros en Laravel 5

		- Carpeta Middleware:
			/app/Http/Middleware

		El siguiente fichero, se encarga de cargar los filtros:
			/app/Http/Kernel.php

			protected $middleware - Se cargaran siempre en cada una de las peticiones que se hacen a nuestro servicio web o API RESTful


			protected $routeMiddleware - Se cargaran de manera opcional, cuando se les llame.

		'App\Http\Middleware\VerifyCsrfToken'
			Realiza la verificacion del Token CSRF

			-Deshabilitarlo unicamente si nunca vamos a utilizar formularios

--AUTENTICACION BASICA Y MIDDLEWARES

	- Laravel ya nos provee un MIDDLEWARE correctamente definido

	- Modelo USER: viene por defecto con la instalación de Laravel
		C:\xampp\htdocs\RESTfulAPI\app\User.php


	1. Crear la migración
		php artisan make:migration user --create=users

	2. Agregar los campos (email, password) al fichero:
		C:\xampp\htdocs\RESTfulAPI\database\migrations\2017_07_23_044655_user.php

	3. Procesar la migración 
		Creamos la tabla 'users' en la base de datos.
		php artisan migrate

	4. Crear el Seeder 'UserSeeder'

	5. Ejecutar por consola lo siguiente:
		composer dump-autoload
		php artisan db:seed

	EJECUTAR TODO DESDE UN INICIO
		php artisan migrate:refresh --seed

	6. Agregar filtro a un controlador
		public function __construct()
		{
			$this->middleware('auth.basic');
		}

--ALMACENANDO DATOS USANDO INYECCION DE DEPENDENCIAS (store)

	1. Implementando la función "store" del controlador "Fabricante"
	2. Implementando la función "store" del controlador "FabricanteVehiculo"

--REPARANDO LA INSERCION DE RECURSOS ANIDADOS (store)

	1. Agregar a la función el parametro "id"
	2. Eliminar de la validación "fabricante_id"
	3. Modificar la siguiente linea de codigo:
		$fabricante = Fabricante::find($id);
 
--ACTUALIZANDO VALORES DE UN RECURSO (put & patch)
	-Implementación de la función "update" para el FABRICANTE
		- Diferencia entre PUT y PATCH:
		PUT: Cuando recibe una peticion realiza una sustitucion completa (debemos enviar todos los valores).
		PATCH: Cuando recibe una peticion realiza una sustitucion incompleta.
	
--ACTUALIZANDO VALORES DE UN RECURSO ANIDADO
	- Modificar el metodo "update" del controlador "FabricanteVehiculo"
	- La bandera tmb se añade al metodo "update" del controtador "Fabricante"
	- 304 - Not Modified (No hay necesidad de retornar nada)

--ELIMINANDO RECURSOS A PETICION
	- Modificar el metodo "destroy" del controlador "FabricanteVehiculo"
	- 204 - No Content
		La petición se ha completado con éxito pero su respuesta no tiene ningún contenido

	- Modificar el metodo "destroy" del controlador "Fabricante"
	- 409 - Conflict
		Indica que la solicitud no pudo ser procesada debido a un conflicto con el estado actual del recurso que esta identifica.
	
SECCION 4: MEJORANDO LA SEGURIDAD Y FUNCIONAMIENTO DE LA API

	HACKEANDO NUESTRA API POR MEDIO DE CSRF

	IMPIDIENDO CSRF EN NUESTRA API CON UN MIDDLEWARE PROPIO
		1. Modificar el archivo ".env"
			SESSION_DRIVER=array (en vez de file)

		2. Por medio de un Middleware
			- Copiamos todo lo que este en el siguiente archivo:
				C:\xampp\htdocs\RESTfulAPI\vendor\laravel\framework\src\Illuminate\Auth\Middleware\AuthenticateWithBasicAuth.php

			- Creamos un nuevo middleware
				C:\xampp\htdocs\RESTfulAPI\app\Http\Middleware\OnceAuth.php

			- Modificamos el Kernel
				'auth.basic.once' => 'App\Http\Middleware\OnceAuth',

			- Agregamos el nuevo filtro en los Controladores
				Fabricante y VehiculoFabricante

	MEJORANDO EL FUNCIONAMIENTO Y CALIDAD DEL API
		1. Mensaje personalizado al fallar la aplicación

			- Modificar la función handle del filtro "OnceAuth"

		2. Eliminación de rutas innecesarias

			- Modificar el archivo C:\xampp\htdocs\RESTfulAPI\app\Http\routes.php
				ONLY y EXCEPT

		3. Eliminar los metodos que sobran

			- Ir a cada controlador y comentar o eliminar los metodos que no se usan

		4. Agregar un control de rutas inexistentes

			- Agregar un patron y pintarlo como una expresion regular que va coincidir con ello.
				C:\xampp\htdocs\RESTfulAPI\app\Http\routes.php

			- LARAVEL hace de manera secuencial las rutas


SECCIOÓN 7: FUNCIONALIDADES ÚTILES

	AGREGANDO LA VERSION A LA RUTA DE LA API
		-Se agrega un grupo en la siguiente ruta:
			C:\xampp\htdocs\RESTfulAPI\app\Http\routes.php


	CACHEANDO LAS RESPUESTAS PARA REDUCIR LA CARGA DE LA BASE DE DATOS
		Ejemplo:
		
		-Agregar la siguiente clase en el controlador Fabricante
			use Illuminate\Support\Facades\Cache;

		-Consumir la CACHE de la siguiente manera
			$fabricantes = Cache::remember('fabricantes', 20/60, function(){
        			return Fabricante::all();
        		});

	PAGINACIÓN DE RESULTADOS EXTENSOS
		Para el ejemplo, haremos lo siguiente:

		1. Modificar en el Seeder Fabricante (100 Fabricantes)

		2. Modificar en el Seeder Vehiculos (500 Vehiculos)

		3. Ejecutar por consola:
			php artisan migrate:refresh --seed

		4. Modificar la función index del controlador Fabricante
			//return Fabricante::all();
			return Fabricante::simplePaginate(15);
			return response()->json(array(
            	'siguiente' => $fabricantes->nextPageUrl(), 
            	'anterior' => $fabricantes->previousPageUrl() ,
            	'datos' => $fabricantes->items(),
        	), 200);

SECCIÓN 8: ACTUALIZANDO A LARAVEL 5.1

	https://laravel.com/docs/5.3/upgrade#upgrade-5.1.0

	- Obtener la version de laravel que tengo instalada
		php artisan -version

	- Buscar la version en GITHUB
		https://github.com/laravel/framework/blob/5.1/composer.json

	- Modificar el archivo composer.json

		ANTES:

		"require": {
			"laravel/framework": "5.0.*"
		},
		"require-dev": {
			"phpunit/phpunit": "~4.0",
			"phpspec/phpspec": "~2.1",
			"fzaninotto/faker": "^1.6"
		},

		AHORA:

		"require": {
			"php": ">=5.5.9",
			"laravel/framework": "5.1.*"
		},
		"require-dev": {
			"fzaninotto/faker": "^1.6",
			"mockery/mockery": "0.9.*",
			"phpunit/phpunit": "~4.0",
			"phpspec/phpspec": "~2.1",
			"lucadegasperi/oauth2-server-laravel": "4.0.x@dev"
		},

	- Ejecutar por consola lo  siguiente
		composer update

	ERROR:
	 	file_put_contents(C:\xampp\htdocs\RESTfulAPI/bootstrap/cache/services.json)
		: failed to open stream: No such file or directory

	SOLUCIÓN:
		Este error esta relacionado con la ubicación de la carpeta CACHE

		- En el archivo C:\xampp\htdocs\RESTfulAPI\bootstrap\autoload.php realizar la siguiente modificación.

			$compiledPath = __DIR__.'/cache/compiled.php'; //Laravel 5.1

		- Crear los siguientes directorios
			bootstrap/cache
			bootstrap/cache/.gitignore

		- Validar que todo este funcionando y ejecutar por consola
			php artisan --version

		
SECCIÓN 9: SEGURIDAD CON OAuth2: CONTROLANDO EL ACCESO Y VALIDANDO PETICIONES

	INTRODUCCIÓN A OAuth2
		https://github.com/lucadegasperi/oauth2-server-laravel

		Es una metodologia o una forma alternativa para la validacion de usuarios y para poder compartir recursos para diferentes clientes en una API RESTful.

		Antes de OAuth u OAuth2:
		- Un usuario era validado por "Stateless Authentication" que es una validacion de usuarios sin estado, que no se mantiene a traves de las diferentes peticiones.

		Access Token: 
			Elemento o codigo de un usuario que le permite ser validado al interior del sistema

		Authorization Code: 
			Es utilizado en un tipico especifico de validacion OAuth, código único.

		Authorization Server: 
			Servidor aparte o parte de la plataforma web (nuestro caso), que es el encargador de realizar la autorización del usuario y generar los Access Token.

		Client: 	
			Aplicación que tiene acceso a los recursos, el cliente no necesariamente el propietario de esos recursos.

		Grant: 
			Método para conceder permisos de funcionalidad del OAuth2

		Reource Server:
			Es nuestra API RESTful actual

		Scope:
			Tipos de permisos y accesos que puede tener nuestro servidor


		1. CHOOOSING A GRANT
			https://github.com/lucadegasperi/oauth2-server-laravel/blob/master/docs/authorization-server/choosing-grant.md

			Diferentes metodos(4) de garantizar accesos a los usuarios.

			Utilizaremos: Resource owner credentials grant


	REMOVIENDO LA VERSIÓN ANTERIOR A OAuth2 (opcional)
		Eliminar la siguiente linea del archivo composer.json
			"lucadegasperi/oauth2-server-laravel": "4.0.x@dev"


	OBTENIENDO E INSTALANDO EL SERVIDOR DE OAuth2 EN LARAVEL
		1. Agregar al archivo composer.json, nodo "require-dev"
			"lucadegasperi/oauth2-server-laravel": "5.0.*"

		2. Agregar a los providers del archivo config/app.php lo siguiente:
			'LucaDegasperi\OAuth2Server\Storage\FluentStorageServiceProvider',
			'LucaDegasperi\OAuth2Server\OAuth2ServerServiceProvider',

		3. Agregar a los aliases del archivo config/app.php lo siguiente:
			'Authorizer' => 'LucaDegasperi\OAuth2Server\Facades\Authorizer',

		4. Incluir o publicar toda la configuración de esta dependencia
			php artisan vendor:publish

			- El siguiente archivo de agrega al directorio "config"
				config/oauth2.php

		5. Agregar al archivo "kernel" el middleware:
			OAuth2 - Verificacion del Access Token
			'oauth' => '\LucaDegasperi\OAuth2Server\Middleware\OAuthMiddleware'

		6. Agregar al archivo "kernel" el middleware:
			OAuth2 - Tranformación de las respuestas a JSON en caso de ocurrir alguna excepción
			'\LucaDegasperi\OAuth2Server\Middleware\OAuthExceptionHandlerMiddleware',

		7. Ejecutar en consola lo siguiente:
			php artisan migrate:refresh --seed


	CONFIGURANDO Y PROBANDO EL SERVIDOR OAuth2

		1. Crear seeder para la tabla oauth_clients
			database/seeds/Oauth2Seeder.php
		2. Agregar seeder al DatabaseSeeder
			database/seeds/DatabaseSeeder.php

		3. Configuración del grant_type
			config/oauth2.php

			- Agregar la siguiente linea:

			'password' => array(
                'class' => '\League\OAuth2\Server\Grant\PasswordGrant',
                'callback' => 'App\Http\Controllers\Verificador@verificar',
                'access_token_ttl' => 3600,
            )

            - Requiere tanto credenciales validas de un usuario y un cliente

        4. Ejecutar en consola para crear el controlador Verificador:
        	php artisan make:controller Verificador --plain

    	5. Codear la función verificar en el controlador Verificador

    	6. Ejecutar por postman la siguiente url usando el metodo POST
    		http://localhost/RESTfulAPI/public/oauth/access_token

    		ERROR: Peticion invalida por no enviar GRANT_TYPE

    		SOL: 
    			- Agregar la siguiente sentencia en el DatabaseSeeder
    				DB::statement("SET FOREIGN_KEY_CHECKS = 0");

				- Ejecutar por consola los siguientes comandos
					composer dump-autoload
					php artisan db:seed

				- Agregar por la pestaña body:
					grant_type 		: password
					client_id		: id1
					client_secret 	: secret1
					username 		: fake@fake.com
					password 		: algo

			RETORNA: Access Token que tendra una duracion de 3600 segundos
				{
				    "access_token": "hLzeOU1H06QZqyrguSpPTlPcrNBgGFb1s5VFTit1",
				    "token_type": "Bearer",
				    "expires_in": 3600
				}


	PROTEGIENDO LOS RECURSOS Y OPERACIONES CON OAuth2

		- Falta indicarle a LARAVEL cuando utilizar el middleware

		1. Modificar en los constructores de los controladores Fabricante y FabricanteVehiculo el uso del middleware "oauth"

			Metodo POST recibe el access_token por FORM-DATE

			Metodo PUT, PATH Y DELETE por X-WWW-FORM-URLENCODED


SECCIÓN 10: ACTUALIZANDO A LARAVEL 5.2
	
	Tener en cuenta las siguientes URLs
		LARAVEL: https://laravel.com/docs/5.2/upgrade#upgrade-5.2.0
		GITHUB: https://github.com/laravel/laravel/tree/5.2

	1. Copiar el archivo en nuestro actual composer.json
		https://github.com/laravel/laravel/blob/5.2/composer.json

	2. Copiar el archivo auth.php del directorio config del GITHUB en el archivo auth.php de nuestro proyecto actual

	3. Copiar el siguiente codigo del archivo app.php del GITHUB en el archivo app.php de nuestro proyecto actual

		/*
	    |--------------------------------------------------------------------------
	    | Application Environment
	    |--------------------------------------------------------------------------
	    |
	    | This value determines the "environment" your application is currently
	    | running in. This may determine how you prefer to configure various
	    | services your application utilizes. Set this in your ".env" file.
	    |
	    */
	    'env' => env('APP_ENV', 'production'),

    4. Eliminar del archivo compile.php lo siguiente:
    	files =>
    	//realpath(__DIR__.'/../app/Providers/BusServiceProvider.php'),
		//realpath(__DIR__.'/../app/Providers/ConfigServiceProvider.php'),

	5. Eliminar del archivo app.php lo siguiente:
		providers =>
		//'Illuminate\Routing\ControllerServiceProvider',
		//'App\Providers\BusServiceProvider',

	6. Eliminar el siguiente archivo
		app/Providers/BusServiceProvider.php

	7. Buscar y reemplazar la palabra "timestamps" por "nullableTimestamps" en el siguiente directorio:
		database/migrations

	8. Copiar la definicion de las siguientes clases y el atributo protected en el siguiente archivo:
		app/Exceptions/Handler.php

		use Illuminate\Validation\ValidationException;
		use Illuminate\Auth\Access\AuthorizationException;
		use Illuminate\Database\Eloquent\ModelNotFoundException;
		use Symfony\Component\HttpKernel\Exception\HttpException;

		protected $dontReport = [
		    AuthorizationException::class,
		    HttpException::class,
		    ModelNotFoundException::class,
		    ValidationException::class,
		];

	9. Copiar el archivo Controller.php del directorio app/Http/Controllers del GITHUB en el archivo app/Http/Controllers/Controller.php de nuestro proyecto actual


SECCION 11: AUN NO TERMINA!

	CREANDO UN VPS EN DigitalOcean
		https://www.digitalocean.com/?refcode=c91e89d20b57